package com.paymentgateway.phonepe;

import java.security.MessageDigest;
import java.util.Base64;

import okhttp3.MediaType;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;

public class PayRequestUPIOpenIntent {



	
	String PHONEPE_REQUEST_URL = "https://api-preprod.phonepe.com/apis/merchant-simulator/pg/v1/pay";
	static OkHttpClient client = new OkHttpClient();
	String saltKey="4f2121ab-5d79-46e5-883e-ff6d46bc3a87";
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		PayRequestUPIOpenIntent ip=new PayRequestUPIOpenIntent();
		try {
			ip.initiatePhonepePayment();
			
		}catch(Exception e) {
			e.printStackTrace();
		}

	}
	public boolean initiatePhonepePayment() {
		
		String purchaseId = "1006";
		String userId = "629388";
		int txnAmount = 116;
		txnAmount = txnAmount*100;
		String PHONEPE_MID = "GAMEZDADDYUAT"; 
		String PURCHASE_REDIRECT_URL="https://pokerapi.pokerdaddy.in/ngaccount/web/add-money/payment-complete/";
		String PHONEPE_CALLBACK_URL="https://pokerapi.pokerdaddy.in/pokerApi/v1/purchase/payments/phonepe/return\";";
		
		try {
			String  pay_Request_UPI_Open_Intent = "{"+
					  "\"merchantId\":\""+PHONEPE_MID+"\","+
					  "\"merchantTransactionId\": \"MT7850590068188104\","+
					  "\"merchantUserId\":\"MU933037302229373\","+
					  "\"amount\": 10000,"+
					  "\"callbackUrl\": \"https://webhook.site/callback-url\","+
					  "\"mobileNumber\":\"9999999999\","+
					  "\"deviceContext\":{"+
						"\"deviceOS\":\"ANDROID\""+
					  "},"+
					  	  "\"paymentInstrument\":{"+
						  "\"type\":\"UPI_INTENT\","+
						  "\"targetApp\":\"com.phonepe.app\""+
					  "}"+
					"}";
			
			//phonepe_payload_card_initiate = JSON.stringify(phonepe_payload_card_initiate);

			
			System.out.println("PHONEPE-INITIATE-REQUEST"+ "raw_payload===--"+ pay_Request_UPI_Open_Intent);
			        
			//String encoded = Buffer.from(phonepe_payload_card_initiate, "utf8").toString("base64");
			String encoded =Base64.getEncoder().encodeToString(pay_Request_UPI_Open_Intent.getBytes());

			//console.log('');
			System.out.println("PHONEPE-INITIATE-REQUEST"+ "encoded====="+ encoded);
			


			String checksum = encoded + "/pg/v1/pay" +saltKey+ 1;

			
			System.out.println("PHONEPE-INITIATE-REQUEST"+ "checksum"+ checksum);

			//String hash = crypto.createHash("sha256").update(checksum, "utf-8").digest("hex");
			String hash =HashCrypto(checksum);
			
			System.out.println("PHONEPE-INITIATE-REQUEST"+ "hash----"+ hash);

			String phonepe_request = "{"+
				    "\"method\": \"POST\","+
				    "\"url\":\""+ PHONEPE_REQUEST_URL+"\","+
				    "\"headers\": {"+
						"\"Content-Type\": \"application/json\","+
						"\"X-VERIFY\":\""+ hash + "###1\""+
				    "},"+
				    "\"body\":{"+ 
				        "\"request\":\""+ encoded+"\""+
				    "}"+
				"}";
			
			System.out.println("phonepe_request----"+phonepe_request);
			
			MediaType mediaType = MediaType.parse("application/json");
    		RequestBody body = RequestBody.create(mediaType, "{\"request\":\""+phonepe_request+"\"}");
    		Request request = new Request.Builder()
    		  .url("https://api-preprod.phonepe.com/apis/merchant-simulator/pg/v1/pay")
    		  .post(body)
    		  .addHeader("accept", "application/json")
    		//  .addHeader("Content-Type", "application/json")
    		  .addHeader("X-VERIFY", hash+"###1")
    		  .build();
    		
			okhttp3.Response response = client.newCall(request).execute();
			
			System.out.println("Response body---"+response.body());
			System.out.println("Response body---"+response.message());
			System.out.println("Response body---"+response.code());
			System.out.println("Response body---"+response.toString());
			
		}catch(Exception e) {
			e.printStackTrace();
		}
		return true;
	}
	
	public static String createHash(String storeId, String txndatetime, String chargetotal, String currency,
			String sharedsecret) {
		String stringToHash = storeId + txndatetime + chargetotal + currency + sharedsecret;
		System.out.println("stringToHash :" + stringToHash);
		return calculateHashFromHex(new StringBuffer(stringToHash));
	}

	private static String calculateHashFromHex(StringBuffer buffer) {
		String algorithm = "SHA-256";

		MessageDigest messageDigest = null;

		try {
			messageDigest = MessageDigest.getInstance(algorithm);
		} catch (Exception e) {
			throw new IllegalArgumentException("Algorithm '" + algorithm + "' not supported");
		}

		StringBuffer result = new StringBuffer();
		StringBuffer sb = new StringBuffer();
		byte[] bytes = buffer.toString().getBytes();

		int byteLen = bytes.length;

		for (int i = 0; i < byteLen; i++) {

			byte b = bytes[i];
			sb.append(Character.forDigit((b & 240) >> 4, 16));
			sb.append(Character.forDigit((b & 15), 16));

		}

		buffer = new StringBuffer(sb.toString());
		messageDigest.update(buffer.toString().getBytes());
		byte[] message = messageDigest.digest();
		int messageLen = message.length;

		for (int j = 0; j < messageLen; j++) {

			byte b = message[j];
			String apps = Integer.toHexString(b & 0xff);
			if (apps.length() == 1) {
				apps = "0" + apps;
			}
			result.append(apps);
		}
		System.out.println("HASH :" + result.toString());
		return result.toString();

	}
	
	
	public String HashCrypto(String input)throws Exception
    {
       // String password = "seed";

        MessageDigest md = MessageDigest.getInstance("SHA-256");
        md.update(input.getBytes());

        byte byteData[] = md.digest();
        StringBuffer sb=new StringBuffer();

        //convert the byte to hex format method 1
       // byte[] byteArray=input.getBytes();
        
        for (int i = 1; i < byteData.length-1; i++) {
        	//System.out.println(i);
        	
        	sb.append(Integer.toString((byteData[i] & 0xff) + 0x100, 16).substring(1));
         
        }

        System.out.println("Hex format : " + sb.toString());

        //convert the byte to hex format method 2
        StringBuffer hexString = new StringBuffer();
        for (int i=0;i<byteData.length;i++) {
            String hex=Integer.toHexString(0xff & byteData[i]);
            if(hex.length()==1) hexString.append('0');
            hexString.append(hex);
        }
        return hexString.toString();
    }



}
