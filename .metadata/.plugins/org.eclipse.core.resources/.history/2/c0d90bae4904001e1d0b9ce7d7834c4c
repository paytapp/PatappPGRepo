package com.paymentgateway.phonePe;

import java.io.IOException;
import java.security.MessageDigest;
import java.util.Base64;
import java.util.Properties;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import okhttp3.MediaType;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;

@Service
public class initiatePhonepe {

	@Autowired
	PhonePeCommon common;
	
	String PHONEPE_REQUEST_URL;
	String saltKey;
	String saltIndex;
	static OkHttpClient client = new OkHttpClient();
	
	
	public static void main(String[] args) {
		initiatePhonepe ip=new initiatePhonepe();
		String purchaseId = "1006";
		String userId = "629388";
		int txnAmount = 116;
		try {
			ip.initiatePhonepePayment(purchaseId, userId, txnAmount);
			
		}catch(Exception e) {
			e.printStackTrace();
		}

	}
	public boolean initiatePhonepePayment(String purchaseId, String userId, int txnAmount) throws IOException {
		Properties prop = common.getAllProperties();
		
//		String purchaseId = "1006";
//		String userId = "629388";
//		int txnAmount = 116;
		txnAmount = txnAmount*100;
		
		String baseUrl = prop.getProperty("PHONEPE_BASE_URL");
		String payEndpoint = prop.getProperty("PHONEPE_PAY_ENDPOINT");
		String PHONEPE_MID = prop.getProperty("PHONEPE_MID");
		String PURCHASE_REDIRECT_URL = prop.getProperty("PURCHASE_REDIRECT_URL");
		String PHONEPE_CALLBACK_URL = prop.getProperty("PHONEPE_CALLBACK_URL");
		saltKey = prop.getProperty("PHONEPE_SALTKEY");
		saltIndex = prop.getProperty("PHONEPE_SALT_INDEX");
		PHONEPE_REQUEST_URL = baseUrl + payEndpoint;
		
		try {
			String  phonepe_payload_card_initiate = "{"+
				    "\"merchantId\":\""+PHONEPE_MID+"\","+
				    "\"merchantTransactionId\":\""+ purchaseId+"\","+
				    "\"merchantUserId\":\""+userId+"\","+
				    "\"amount\":\""+ txnAmount+"\","+
				    "\"redirectUrl\":\""+ PURCHASE_REDIRECT_URL + purchaseId+"\","+
				    "\"redirectMode\":\"POST\","+
				    "\"callbackUrl\":\""+ PHONEPE_CALLBACK_URL+"\","+
				    "\"paymentInstrument\":{"+
						"\"type\":\"PAY_PAGE\""+
				        	
				    "}}";
			
			//phonepe_payload_card_initiate = JSON.stringify(phonepe_payload_card_initiate);

			
			System.out.println("PHONEPE-INITIATE-REQUEST"+ "raw_payload=====     "+ phonepe_payload_card_initiate);
			        
			//String encoded = Buffer.from(phonepe_payload_card_initiate, "utf8").toString("base64");
			String encoded =Base64.getEncoder().encodeToString(phonepe_payload_card_initiate.getBytes());

			//console.log('');
			System.out.println("PHONEPE-INITIATE-REQUEST"+ "encoded=====      "+ encoded);
			


			String checksum = encoded + "/pg/v1/pay" +saltKey;

			
			System.out.println("PHONEPE-INITIATE-REQUEST"+ "checksum====    "+ checksum);

			//String hash = crypto.createHash("sha256").update(checksum, "utf-8").digest("hex");
			String hash =HashCrypto(checksum);
			
			System.out.println("PHONEPE-INITIATE-REQUEST"+ "hash----    "+ hash);

			String phonepe_request = "{"+
				    "\"method\": \"POST\","+
				    "\"url\":\""+ PHONEPE_REQUEST_URL+"\","+
				    "\"headers\": {"+
						"\"Content-Type\": \"application/json\","+
						"\"X-VERIFY\":\""+ hash + "###" + saltIndex + "\""+
				    "},"+
				    "\"body\":{"+ 
				        "\"request\":\""+ encoded+"\""+
				    "}"+
				"}";
			
			System.out.println("phonepe_request----    "+phonepe_request);
			
			MediaType mediaType = MediaType.parse("application/json");
    		RequestBody body = RequestBody.create(mediaType, "{\"request\":\""+phonepe_request+"\"}");
    		Request request = new Request.Builder()
    		  .url("https://api-preprod.phonepe.com/apis/merchant-simulator/pg/v1/pay")
    		  .post(body)
    		  .addHeader("accept", "application/json")
    		//  .addHeader("Content-Type", "application/json")
    		  .addHeader("X-VERIFY", hash + "###" + saltIndex)
    		  .build();
    		
			okhttp3.Response response = client.newCall(request).execute();
			
			System.out.println("Response body---     "+response.body());
			System.out.println("Response body---     "+response.message());
			System.out.println("Response body---     "+response.code());
			System.out.println("Response body---     "+response.toString());
			
		}catch(Exception e) {
			e.printStackTrace();
		}
		return true;
	}
	
	public String HashCrypto(String input)throws Exception
    {
       // String password = "seed";

        MessageDigest md = MessageDigest.getInstance("SHA-256");
        md.update(input.getBytes());

        byte byteData[] = md.digest();
        StringBuffer sb=new StringBuffer();

        //convert the byte to hex format method 1
       // byte[] byteArray=input.getBytes();
        
        for (int i = 1; i < byteData.length-1; i++) {
        	//System.out.println(i);
        	
        	sb.append(Integer.toString((byteData[i] & 0xff) + 0x100, 16).substring(1));
         
        }

        System.out.println("Hex format : " + sb.toString());

        //convert the byte to hex format method 2
        StringBuffer hexString = new StringBuffer();
        for (int i=0;i<byteData.length;i++) {
            String hex=Integer.toHexString(0xff & byteData[i]);
            if(hex.length()==1) hexString.append('0');
            hexString.append(hex);
        }
        return hexString.toString();
    }


}
