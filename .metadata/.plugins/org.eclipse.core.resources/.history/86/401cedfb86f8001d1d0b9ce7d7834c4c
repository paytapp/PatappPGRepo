package com.paymentgateway.phonepe;

import java.math.BigInteger;
import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Base64;

import javax.ws.rs.core.Response;

import okhttp3.MediaType;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
//import javax.crypto.;


public class TestEncodeBase64 {

	
	//static final String crypto = "crypto";
	;
	static OkHttpClient client = new OkHttpClient();
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub

		String phonepePayload="";
		RequestBody reqBody=null;
		try {
			phonepePayload = "{"+
					  "\"merchantId\": \"GAMEZDADDYUAT\",\""+
					  "\"merchantTransactionId\": \"MT7850590068188104\","+
					  "\"merchantUserId\": \"PAYTAPP1\","+
					  "\"amount\": 10000,"+
					  "\"redirectUrl\": \"https://webhook.site/redirect-url\","+
					  "\"redirectMode\": \"POST\","+
					  "\"callbackUrl\": \"https://webhook.site/callback-url\","+
					  "\"mobileNumber\": \"9999999999\","+
					  "\"paymentInstrument\": {"+
					  "\"type\": \"WINDOWS\""+
					  "}"+
					"}";
	 
	        // Encode into Base64 format
	        String BasicBase64format
	            = Base64.getEncoder()
	                  .encodeToString(phonepePayload.getBytes());
	        
	        System.out.println("Base value is ----"+BasicBase64format);
	 
	        // print encoded String
	        System.out.println("Encoded String:\n" + BasicBase64format);
	        
	        String PHONEPE_REQUEST_URL="https://api-preprod.phonepe.com/apis/merchant-simulator/pg/v1/pay";
	        
	        String checksum = BasicBase64format + "/pg/v1/pay" + 1;

	       
	        System.out.println("PHONEPE-INITIATE-REQUEST==="+ "checksum=="+ checksum);

	        
	        //String hash = crypto.createHash("sha256").update(checksum, "utf-8").digest("hex");
	        
	        byte[] hashByte=getSHA(checksum);
	        String hash=toHexString(hashByte);

	        //console.log('');
	        System.out.println("PHONEPE-INITIATE-REQUEST"+"hash"+ hash);


			/*
			 * String phonepe_request = "{"+ "\"method\": \"POST\","+ "\"url\":"+
			 * PHONEPE_REQUEST_URL+"\","+ "\"headers\": {"+
			 * "\"Content-Type\": \"application/json\","+ "\"X-VERIFY\":"+ hash +
			 * "\"###1\","+ "},"+ "body: JSON.stringify({"+ "request:"+ phonepePayload+
			 * "})"+ "};";
			 */

	        //console.log('');
	        System.out.println("PHONEPE-INITIATE-REQUEST"+"phonepe_request"+ phonepePayload);

	      	        		//======================================
	        		
	        		
	        		MediaType mediaType = MediaType.parse("application/json");
	        		RequestBody body = RequestBody.create(mediaType, "{\"request\":\""+phonepePayload+"\"}");
	        		Request request = new Request.Builder()
	        		  .url("https://api-preprod.phonepe.com/apis/merchant-simulator/pg/v1/pay")
	        		  .post(body)
	        		  .addHeader("accept", "application/json")
	        		  .addHeader("Content-Type", "application/json")
	        		  .build();

	        		okhttp3.Response response = client.newCall(request).execute();
	        		
	        		System.out.println("Responser ------"+response);
	        		System.out.println("Responser ------"+response.code());
	        		System.out.println("Responser ------"+response.body());
	        		
	        		System.out.println("Responser ------"+response.toString());
	        
	
	}catch(Exception e) {
		e.printStackTrace();
	}

}
	 public static String toHexString(byte[] hash)
	    {
	        // Convert byte array into signum representation
	        BigInteger number = new BigInteger(1, hash);
	 
	        // Convert message digest into hex value
	        StringBuilder hexString = new StringBuilder(number.toString(16));
	 
	        // Pad with leading zeros
	        while (hexString.length() < 64)
	        {
	            hexString.insert(0, '0');
	        }
	 
	        return hexString.toString();
	    }
	 public static byte[] getSHA(String input) throws NoSuchAlgorithmException
	    {
	        // Static getInstance method is called with hashing SHA
	        MessageDigest md = MessageDigest.getInstance("SHA-256");
	 
	        // digest() method called
	        // to calculate message digest of an input
	        // and return array of byte
	        return md.digest(input.getBytes(StandardCharsets.UTF_8));
	    }
}
