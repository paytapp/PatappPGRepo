package com.paymentgateway.phonepe;

import java.math.BigInteger;
import java.security.MessageDigest;
import java.util.Base64;

import okhttp3.MediaType;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;

public class initiatePhonepe {

	
	String PHONEPE_REQUEST_URL = "https://api-preprod.phonepe.com/apis/merchant-simulator/pg/v1/pay";
	static OkHttpClient client = new OkHttpClient();
	String saltKey="4f2121ab-5d79-46e5-883e-ff6d46bc3a87";
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		initiatePhonepe ip=new initiatePhonepe();
		try {
			ip.initiatePhonepePayment();
			
		}catch(Exception e) {
			e.printStackTrace();
		}

	}
	public boolean initiatePhonepePayment() {
		
		String purchaseId = "1006";
		String userId = "629388";
		int txnAmount = 116;
		txnAmount = txnAmount*100;
		String PHONEPE_MID = "GAMEZDADDYUAT"; 
		String PURCHASE_REDIRECT_URL="https://pokerapi.pokerdaddy.in/ngaccount/web/add-money/payment-complete/";
		String PHONEPE_CALLBACK_URL="https://pokerapi.pokerdaddy.in/pokerApi/v1/purchase/payments/phonepe/return";
		
		try {
			String  phonepe_payload_card_initiate = "{"+
				    "\"merchantId\":\""+PHONEPE_MID+"\","+
				    "\"merchantTransactionId\":\""+ purchaseId+"\","+
				    "\"merchantUserId\":\""+userId+"\","+
				    "\"amount\":\""+ txnAmount+"\","+
				    "\"redirectUrl\":\""+ PURCHASE_REDIRECT_URL + purchaseId+"\","+
				    "\"redirectMode\":\"POST\","+
				    "\"callbackUrl\":\""+ PHONEPE_CALLBACK_URL+"\","+
				    "\"paymentInstrument\":{"+
						"\"type\":\"PAY_PAGE\""+
				    "}}";
			
			
			 System.out.println("PHONEPE-INITIATE-REQUEST"+ "raw_payload===--"+ phonepe_payload_card_initiate);
			        
			//String encoded = Buffer.from(phonepe_payload_card_initiate, "utf8").toString("base64");
			String encoded =Base64.getEncoder().encodeToString(phonepe_payload_card_initiate.getBytes());
			//String encode = Buffer.from(hash).toString("base64").toString("utf-8");

			byte[] byteArray = phonepe_payload_card_initiate.getBytes("UTF-8"); 
			/*
			 * Base64 bs = new Base64(); //bs.encodeBytes(byteArray);
			 * System.out.println(bs.encodeBytes(byteArray));
			 * //bs.decode(bs.encodeBytes(byteArray));
			 * System.out.println(bs.decode(bs.encodeBytes(byteArray)));
			 */
			//console.log('');
			encoded =Base64.getEncoder().encodeToString(byteArray);
			System.out.println("PHONEPE-INITIATE-REQUEST"+ "encoded====="+ encoded);
			


			String checksum = encoded + "/pg/v1/pay" +saltKey+ 1;

			
			System.out.println("PHONEPE-INITIATE-REQUEST"+ "checksum"+ checksum);

			//String hash = crypto.createHash("sha256").update(checksum, "utf-8").digest("hex");
			   
			
			String hash =HashCrypto(checksum);
			
			System.out.println("PHONEPE-INITIATE-REQUEST"+ "hash----"+ hash);
	//		System.out.println("PHONEPE-INITIATE-REQUEST"+ "hash2----"+ sha256hex);

			String phonepe_request = "{"+
				    "\"method\": \"POST\","+
				    "\"url\":\""+ PHONEPE_REQUEST_URL+"\","+
				    "\"headers\": {"+
						"\"Content-Type\": \"application/json\","+
						"\"X-VERIFY\":\""+ hash + "###1\""+
				    "},"+
				    "\"body\":{"+ 
				        "\"request\":\""+ encoded+"\""+
				    "}"+
				"}";
			
			System.out.println("phonepe_request----"+phonepe_request);
			
			MediaType mediaType = MediaType.parse("application/json");
    		RequestBody body = RequestBody.create(mediaType, "{\"request\":\""+phonepe_request+"\"}");
    		Request request = new Request.Builder()
    		  .url("https://api-preprod.phonepe.com/apis/merchant-simulator/pg/v1/pay")
    		  .post(body)
    		  .addHeader("accept", "application/json")
    		  .addHeader("Content-Type", "application/json")
    		  .addHeader("X-VERIFY", hash+"###1")
    		  .build();
    		
			okhttp3.Response response = client.newCall(request).execute();
			
			System.out.println("Response body---"+response.body());
			System.out.println("Response body---"+response.message());
			System.out.println("Response body---"+response.code());
			System.out.println("Response body---"+response.toString());
			
		}catch(Exception e) {
			e.printStackTrace();
		}
		return true;
	}
	
	public String HashCrypto(String input)throws Exception
    {
       
		  StringBuffer hexString = new StringBuffer();
       try {
    	   MessageDigest md = MessageDigest.getInstance("SHA-256");
           md.update(input.getBytes());

           byte byteData[] = md.digest();

           //convert the byte to hex format method 1
           StringBuffer sb = new StringBuffer();
           for (int i = 0; i < byteData.length; i++) {
            sb.append(Integer.toString((byteData[i] & 0xff) + 0x100, 16).substring(1));
           }

           System.out.println("Hex format : " + sb.toString());

           //convert the byte to hex format method 2
          
           for (int i=0;i<byteData.length;i++) {
               String hex=Integer.toHexString(0xff & byteData[i]);
               if(hex.length()==1) hexString.append('0');
               hexString.append(hex);
           }
           System.out.println("Hex format : " + hexString.toString());
       }catch(Exception e) {
    	   e.printStackTrace();
       }
       return hexString.toString();
    }
	public String HashCrypto_old(String input)throws Exception
    {
       // String password = "seed";
		String hshtxt ="";
       try {
    	   MessageDigest msgDst = MessageDigest.getInstance("sha256");  
    	   
    	// the digest() method is invoked to compute the message digest  
    	// from an input digest() and it returns an array of byte  
    	byte[] msgArr = msgDst.digest(input.getBytes());  
    	  
    	// getting signum representation from byte array msgArr  
    	BigInteger bi = new BigInteger(1, msgArr);  
    	  
    	// Converting into hex value  
    	hshtxt = bi.toString(16);  
    	  
    	while (hshtxt.length() < 32)   
    	{  
    	hshtxt = "0" + hshtxt;  
    	}  
    	  
       }catch(Exception e) {
    	   e.printStackTrace();
       }
       return hshtxt;
    }
	public String getEncoding(String input) {
		String returnString="";
		//StringBuffer inputBuffer=input.getBytes();
		try {
			//const encode = Buffer.from(input).toString("base64").toString("utf-8");
			
		}catch(Exception e) {
			e.printStackTrace();
		}
		return returnString;
	}

	
}
