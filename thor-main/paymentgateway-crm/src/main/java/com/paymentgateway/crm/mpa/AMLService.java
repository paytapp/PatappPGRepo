package com.paymentgateway.crm.mpa;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.StringWriter;
import java.net.HttpURLConnection;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import java.security.KeyStore;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.cert.CertificateFactory;
import java.security.cert.X509Certificate;
import java.util.ArrayList;
import java.util.Base64;
import java.util.Collections;
import java.util.Enumeration;
import java.util.List;
import java.util.Map;

import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import javax.xml.bind.DatatypeConverter;
import javax.xml.crypto.dsig.CanonicalizationMethod;
import javax.xml.crypto.dsig.DigestMethod;
import javax.xml.crypto.dsig.Reference;
import javax.xml.crypto.dsig.SignatureMethod;
import javax.xml.crypto.dsig.SignedInfo;
import javax.xml.crypto.dsig.Transform;
import javax.xml.crypto.dsig.XMLSignature;
import javax.xml.crypto.dsig.XMLSignatureFactory;
import javax.xml.crypto.dsig.dom.DOMSignContext;
import javax.xml.crypto.dsig.keyinfo.KeyInfo;
import javax.xml.crypto.dsig.keyinfo.KeyInfoFactory;
import javax.xml.crypto.dsig.keyinfo.X509Data;
import javax.xml.crypto.dsig.spec.C14NMethodParameterSpec;
import javax.xml.crypto.dsig.spec.TransformParameterSpec;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.w3c.dom.Document;
import org.w3c.dom.Element;

import com.paymentgateway.commons.dao.MPADao;
import com.paymentgateway.commons.dao.MPAMerchantDao;
import com.paymentgateway.commons.user.MerchantProcessingApplication;
import com.paymentgateway.commons.util.Constants;
import com.paymentgateway.commons.util.PropertiesManager;
import com.paymentgateway.commons.util.TransactionManager;

/**
 * @author Pooja Pancholi
 *
 */

@Service
public class AMLService {
	
	@Autowired
	private MPADao mpaDao;
	
	private static final String AES_CIPHER_ALGORITHM = "AES/ECB/PKCS5PADDING";
	private static final String RSA_CIPHER_ALGORITHM = "RSA/ECB/PKCS1Padding";
	public static final String SESSION_OPEN_KEY = "<SessionKey>";
	public static final String SESSION_CLOSE_KEY = "</SessionKey>";
	public static final String RESPONSE_OPEN_DATA = "<ResponseData>";
	public static final String RESPONSE_CLOSE_DATA = "</ResponseData>";

	public static final String REPORT_OPEN_DATA = "<ReportData>";
	public static final String REPORT_CLOSE_DATA = "</ReportData>";

	public static final String MATCH_OPEN = "<Matched>";
	public static final String MATCH_CLOSE = "</Matched>";
	public static final String REQUEST_OPEN_STATUS = "<RequestStatus>";
	public static final String REQUEST_CLOSE_STATUS = "</RequestStatus>";

	private static final Logger logger = LoggerFactory.getLogger(AMLService.class.getName());

	public String getAMLResponse(Map<String, String> requestMap, String payId) {
		try {
			SecretKey Symmetrickey = createAESKey();
			String sessionKey = sessionKeyProvider(Symmetrickey);
			String requestData = generateRequest(requestMap);
			String encyptedbRequestData = encrypt(requestData, Symmetrickey);
			String encodedStringRsa = encryptRsa(sessionKey);

			String requestModel = requestModel(PropertiesManager.propertiesMap.get(Constants.AML_TOKEN.getValue()),
					encyptedbRequestData, encodedStringRsa);
			String finalRequest = getsignature();
		    String response = getResponse(finalRequest);
			
			
			
			/*
			 * String response = "<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n" +
			 * "<A64EncryptedResponseModel xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\r\n"
			 * +
			 * "  <SessionKey>DFlqAID38cbSN4pRp4jg+wc48XSUW7caXzxXQHLwVZuMG5IoryV7zDT/2HRv+bWWWfCf4B+O28P+QY8CZczhhI57qwG8HclXZKCvq6YUPzaeCFvmNpu70k72X9ebRjQzcjvmUGBD0aW6LywpXRVIv6EsKr3DXGMDkoFXhPqg1k6gGQZDxoOP3o7rkaeeF6FOP5X4TAWziJm9EMc+HlVGN+41x45Gyqoaves6NEUhSN3sGVymq0xUd09HXmQo8lhhSfMX0lEs7ou7cHLljsJTpKud2xqG1VbW41Ic1LW5XbrJIbpw39HWt1Ut3h/Z1EIcuSWyMzsRz01sl0v/1yJZpw==</SessionKey>\r\n"
			 * +
			 * "  <ResponseData>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</ResponseData>\r\n"
			 * +
			 * "<Signature xmlns=\"http://www.w3.org/2000/09/xmldsig#\"><SignedInfo><CanonicalizationMethod Algorithm=\"http://www.w3.org/TR/2001/REC-xml-c14n-20010315\" /><SignatureMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#rsa-sha1\" /><Reference URI=\"\"><Transforms><Transform Algorithm=\"http://www.w3.org/2000/09/xmldsig#enveloped-signature\" /></Transforms><DigestMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#sha1\" /><DigestValue>XV7Ak/jhi+nWeP1DxE5fDIoyjb8=</DigestValue></Reference></SignedInfo><SignatureValue>Lwwaz6HLMHjpYsH5li53RlWOP6VqcDbBn1e219xTt8TZdUvml+GB1zmbNkcVc3NIBG1jBtYCJobr2maRysMSe3uTm9wGRhldNs+i+ktu2xVhrbKmVppiWpnUsBuDQnG6j0bIlXkPKSf0eJpNAPUbpdgUq9nYbdbputuMiKUHy1oP79Q/ciGbVUlZezd9fnTVzJN/DJnNXUW6VwN8Wag4dUwPsNuhwvDDckxEoXd7TfZRMQmXbyZfXSppXH4kRHC4sPWQTl8+cCbHjbggQuHyGl1+cu16HL8bQKvtXxg01Rm9k+LcxFOVgPclSWxUtr1uoxcpdOGyn36+KqT8DVST0g==</SignatureValue><KeyInfo><X509Data><X509SubjectName>E=support@tssconsultancy.com, CN=www.tssconsultancy.com, OU=\"Software \", O=TSS Consultancy Private Limited, L=Mumbai, S=Maharashtra, C=IN</X509SubjectName><X509Certificate>MIIEXzCCA0egAwIBAgIUbc58G4Nb6ytJuT1fjMWgwArvBgMwDQYJKoZIhvcNAQELBQAwgb4xCzAJBgNVBAYTAklOMRQwEgYDVQQIDAtNYWhhcmFzaHRyYTEPMA0GA1UEBwwGTXVtYmFpMSgwJgYDVQQKDB9UU1MgQ29uc3VsdGFuY3kgUHJpdmF0ZSBMaW1pdGVkMRIwEAYDVQQLDAlTb2Z0d2FyZSAxHzAdBgNVBAMMFnd3dy50c3Njb25zdWx0YW5jeS5jb20xKTAnBgkqhkiG9w0BCQEWGnN1cHBvcnRAdHNzY29uc3VsdGFuY3kuY29tMB4XDTIxMDMwNTEyMTUyOVoXDTIyMDMwNTEyMTUyOVowgb4xCzAJBgNVBAYTAklOMRQwEgYDVQQIDAtNYWhhcmFzaHRyYTEPMA0GA1UEBwwGTXVtYmFpMSgwJgYDVQQKDB9UU1MgQ29uc3VsdGFuY3kgUHJpdmF0ZSBMaW1pdGVkMRIwEAYDVQQLDAlTb2Z0d2FyZSAxHzAdBgNVBAMMFnd3dy50c3Njb25zdWx0YW5jeS5jb20xKTAnBgkqhkiG9w0BCQEWGnN1cHBvcnRAdHNzY29uc3VsdGFuY3kuY29tMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAzpvouz2HJ/nGhSqxmeeRbsqgq/9/u65d9KFq/8+3SoDMBGBONQAEt1+q4PY+z68d8j8pvegGoJU/yO+FqUt87687KuiihOfqzmpoVKPQge95lbtXoVXCmJo0dT4r6Jq4DvexRWHlPzdZHL0HjCQLAHznaU4jglnVqfu6y+VrgVG9Khz1cDVh1tsC9rhMsboYDlVLjZUEBnH8dqxNT5xOH/68aOgFWpOGQfgimxOkqtonAP3ArDvXGD0aZxvxM8o7PD3mZz4KCE+lyX/7UjEK8wgoYMGOeIcnei6v83SwEAAW+1egyMCEtVLuc0QcyHDxuVprDqYbNO3/9gLxVdOnTQIDAQABo1MwUTAdBgNVHQ4EFgQUyJClzpKcMjS1t302NXBJLJSzkeAwHwYDVR0jBBgwFoAUyJClzpKcMjS1t302NXBJLJSzkeAwDwYDVR0TAQH/BAUwAwEB/zANBgkqhkiG9w0BAQsFAAOCAQEAawefNwOAAM6PTt9U6D+rVNdRxjM88PnATgBvnqI3cnm72XMImRT4czrRc4gUqXHU/ciH2q6ahbkV2qs4GUSLMB0uw4AZjsBavFt/hevwDqYRB6INft0BAkvSZzrNaOR256lTumadd1ZMMtjtEQ+SGaCn+u+YQjlAMRyDI8LWLqUBVAxVuQIgorJQXRgCrFwGqU2xn3hNiuNv17LHQNtI5gfb0el1PEKAjs1dnVpgAT4LKXDTiFBTnxLQ9hPTbPdbdY2rudS7vGHBZ9tOH/a5KCe5or8rZyAqxDJkgxQadhgsxHosBKsDmUY6UfXJzOHAvVcaSrsFntYVNncyfGKIzA==</X509Certificate></X509Data></KeyInfo></Signature></A64EncryptedResponseModel>"
			 * ;
			 * 
			 * response = response.replace("\n", "").replace("\r", "");
			 */
			 
			 			
		    String status = responseHandler(response,payId);
		    MerchantProcessingApplication mpa = mpaDao.fetchMPADataByPayId(payId);
		    mpa.setAmlStatus(status);
		    mpaDao.update(mpa);
		    
		    return status;
		    
		} catch (Exception e) {
			logger.error("Exception " , e);
			return null;
		}

	}

	public String responseHandler(String response, String payId) {
		String responseSessionKey = getTextBetweenTags(response, SESSION_OPEN_KEY, SESSION_CLOSE_KEY);
		String responseData = getTextBetweenTags(response, RESPONSE_OPEN_DATA, RESPONSE_CLOSE_DATA);

		String decrytedSessionKey = decryptSessionKey(responseSessionKey);
		String decryptedResponseData = decryptResponseData(responseData, decrytedSessionKey);
		logger.info("decrypted ResponseData : " + decryptedResponseData);

		String status = getTextBetweenTags(decryptedResponseData, MATCH_OPEN, MATCH_CLOSE);
		String requestStatus = getTextBetweenTags(decryptedResponseData, REQUEST_OPEN_STATUS, REQUEST_CLOSE_STATUS);
		String reportData = getTextBetweenTags(decryptedResponseData, REPORT_OPEN_DATA, REPORT_CLOSE_DATA);
		if (status.equalsIgnoreCase("Match")) {
			// File file = new File("C:\\\\Users\\\\Amitosh
			//Aanand\\\\Downloads\\\\Files\\MyResponseData.pdf");
			File file = new File(PropertiesManager.propertiesMap.get(Constants.AML_FILE_LOCATION.getValue()) + payId +"AML.pdf");

			try (FileOutputStream fos = new FileOutputStream(file);) {
				// To be short I use a corrupted PDF string, so make sure to use a valid one if
				// you want to preview the PDF file
				String b64 = reportData;
				byte[] decoder = Base64.getDecoder().decode(b64);

				fos.write(decoder);
			} catch (Exception e) {
				logger.error("Exception " , e);
				return null;
			}
		}

		return status;
	}

	public String getTextBetweenTags(String text, String tag1, String tag2) {
		int leftIndex = text.indexOf(tag1);
		if (leftIndex == -1) {
			return null;
		}

		int rightIndex = text.indexOf(tag2);
		if (rightIndex != -1) {
			leftIndex = leftIndex + tag1.length();
			return text.substring(leftIndex, rightIndex);
		}

		return null;
	}// getTextBetweenTags()

	public String decryptSessionKey(String response) {
		try {
			String fileName = PropertiesManager.propertiesMap.get(Constants.AML_PRIVATE_CERT_LOCATION.getValue());
			File file = new File(fileName);
			PrivateKey privateKey = getPrivateKey(file);
			byte[] bytes = Base64.getDecoder().decode(response);

			Cipher decrypt = Cipher.getInstance("RSA/ECB/PKCS1Padding");
			decrypt.init(Cipher.DECRYPT_MODE, privateKey);
			String decryptedMessage = new String(decrypt.doFinal(bytes), StandardCharsets.UTF_8);

			return decryptedMessage;
		} catch (Exception e) {
			logger.error("Exception " , e);
			return null;
		}
	}

	public String decryptResponseData(String input, String key) {
		byte[] output = null;
		try {

			byte[] decodedKey = Base64.getDecoder().decode(key);
			// rebuild key using SecretKeySpec
			SecretKey skey = new SecretKeySpec(decodedKey, 0, decodedKey.length, "AES");

			Cipher cipher = Cipher.getInstance(AES_CIPHER_ALGORITHM);
			cipher.init(Cipher.DECRYPT_MODE, skey);
			output = cipher.doFinal(Base64.getDecoder().decode(input));
		} catch (Exception e) {
			logger.error("Exception " , e);
		}
		return new String(output);
	}

	private PrivateKey getPrivateKey(File filename) {
		try {
			String alias = "";
			String pass = PropertiesManager.propertiesMap.get(Constants.AML_PRIVATE_KEY_PASSWARD.getValue());
			char[] bytePass = pass.toCharArray();

			KeyStore ks = KeyStore.getInstance("pkcs12", "SunJSSE");
			ks.load(new FileInputStream(filename), bytePass);

			// iterate over all aliases
			Enumeration es = ks.aliases();

			boolean isAliasWithPrivateKey = false;
			while (es.hasMoreElements()) {
				alias = (String) es.nextElement();
				// if alias refers to a private key break at that point as we
				// want to use that certificate
				if (isAliasWithPrivateKey = ks.isKeyEntry(alias)) {
					break;
				}
			}
			if (!isAliasWithPrivateKey) {
				return null;
			}
			KeyStore.PrivateKeyEntry pkEntry = (KeyStore.PrivateKeyEntry) ks.getEntry(alias,
					new KeyStore.PasswordProtection(bytePass));

			return pkEntry.getPrivateKey();

		} catch (Exception e) {
			logger.error("Exception " , e);
			return null;
		}

	}

	public String getResponse(String finalRequest) {
		try {
			String url = PropertiesManager.propertiesMap.get(Constants.AML_URL.getValue());
			HttpURLConnection con = null;
			URL requestUrl = new URL(url);
			con = (HttpURLConnection) requestUrl.openConnection();
			con.setRequestMethod("POST");
			con.setRequestProperty("Content-Type", "application/xml");

			con.setConnectTimeout(80000);
			con.setReadTimeout(80000);
			con.setUseCaches(false);
			// con.setDoInput(true);
			con.setDoOutput(true);

			OutputStream os = con.getOutputStream();
			os.write(finalRequest.getBytes());
			os.flush();
			os.close();

			int responseCode = con.getResponseCode();

			StringBuffer resp = new StringBuffer();
			if (responseCode == HttpURLConnection.HTTP_OK) {
				BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));
				String inputLine;
				while ((inputLine = in.readLine()) != null) {
					resp.append(inputLine);
				}
				in.close();
				logger.info("AML response: " + resp.toString());
			}
			return resp.toString();
		} catch (Exception e) {
			logger.error("Exception " , e);
			return null;
		}

	}

	public SecretKey createAESKey() throws Exception {
		KeyGenerator keygenerator = KeyGenerator.getInstance("AES");
		keygenerator.init(256);
		SecretKey key = keygenerator.generateKey();
		return key;
	}

	public String sessionKeyProvider(SecretKey Symmetrickey) {
		String key = null;
		try {
			key = DatatypeConverter.printBase64Binary(Symmetrickey.getEncoded());
		} catch (Exception e) {
			logger.error("Exception " , e);
		}
		return key;
	}

	public String generateRequest(Map<String, String> requestMap) {
		String personXMLStringValue = null;
		DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
		try {
			DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
			Document doc = docBuilder.newDocument();
			// Create Person root element
			Element personRootElement = doc.createElement("ScreeningRequestData");
			personRootElement.setAttribute("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
			personRootElement.setAttribute("xmlns:xsd", "http://www.w3.org/2001/XMLSchema");

			doc.appendChild(personRootElement);
			// Create First Name Element
			Element requestIdElement = doc.createElement("RequestId");
			requestIdElement.appendChild(doc.createTextNode(TransactionManager.getId()));
			personRootElement.appendChild(requestIdElement);

			Element recordIdentifierElement = doc.createElement("RecordIdentifier");
			recordIdentifierElement.appendChild(
					doc.createTextNode(PropertiesManager.propertiesMap.get(Constants.RECORD_IDENTIFIER.getValue())));
			personRootElement.appendChild(recordIdentifierElement);

			Element applicationRefNumberElement = doc.createElement("ApplicationRefNumber");
			applicationRefNumberElement.appendChild(doc.createTextNode(""));
			personRootElement.appendChild(applicationRefNumberElement);

			Element intermediaryCodeElement = doc.createElement("IntermediaryCode");
			intermediaryCodeElement.appendChild(doc.createTextNode(""));
			personRootElement.appendChild(intermediaryCodeElement);

			Element sourceSystemNameElement = doc.createElement("SourceSystemName");
			sourceSystemNameElement.appendChild(doc.createTextNode(""));
			personRootElement.appendChild(sourceSystemNameElement);

			Element parentCompanyElement = doc.createElement("ParentCompany");
			parentCompanyElement.appendChild(
					doc.createTextNode(PropertiesManager.propertiesMap.get(Constants.PARENT_COMPANY.getValue())));
			personRootElement.appendChild(parentCompanyElement);

			Element firstNameElement = doc.createElement("FirstName");
			firstNameElement.appendChild(doc.createTextNode(requestMap.get("FirstName")));
			personRootElement.appendChild(firstNameElement);

			Element middleNameElement = doc.createElement("MiddleName");
			middleNameElement.appendChild(doc.createTextNode(""));
			personRootElement.appendChild(middleNameElement);

			Element lastNameElement = doc.createElement("LastName");
			lastNameElement.appendChild(doc.createTextNode(""));
			personRootElement.appendChild(lastNameElement);

			Element customerCategoryElement = doc.createElement("CustomerCategory");
			customerCategoryElement.appendChild(doc.createTextNode(requestMap.get("CustomerCategory")));
			personRootElement.appendChild(customerCategoryElement);

			Element genderElement = doc.createElement("Gender");
			genderElement.appendChild(doc.createTextNode(""));
			personRootElement.appendChild(genderElement);

			Element panElement = doc.createElement("Pan");
			if (requestMap.containsKey("Pan")) {
				panElement.appendChild(doc.createTextNode(requestMap.get("Pan")));
			} else {
				panElement.appendChild(doc.createTextNode(""));
			}
			personRootElement.appendChild(panElement);

			Element dinElement = doc.createElement("Din");
			dinElement.appendChild(doc.createTextNode(""));
			personRootElement.appendChild(dinElement);

			Element cinElement = doc.createElement("Cin");
			if (requestMap.containsKey("Cin")) {
				cinElement.appendChild(doc.createTextNode(requestMap.get("Cin")));
			} else {
				cinElement.appendChild(doc.createTextNode(""));
			}
			personRootElement.appendChild(cinElement);

			Element passportNumberElement = doc.createElement("PassportNumber");
			passportNumberElement.appendChild(doc.createTextNode(""));
			personRootElement.appendChild(passportNumberElement);

			Element drivingLicenseNumberElement = doc.createElement("DrivingLicenseNumber");
			drivingLicenseNumberElement.appendChild(doc.createTextNode(""));
			personRootElement.appendChild(drivingLicenseNumberElement);

			Element dobElement = doc.createElement("DateOfBirth");
			dobElement.appendChild(doc.createTextNode(""));
			personRootElement.appendChild(dobElement);

			Element birthCityElement = doc.createElement("BirthCity");
			birthCityElement.appendChild(doc.createTextNode(""));
			personRootElement.appendChild(birthCityElement);

			Element countryOfBirthElement = doc.createElement("CountryOfBirth");
			countryOfBirthElement.appendChild(doc.createTextNode(""));
			personRootElement.appendChild(countryOfBirthElement);

			// Create Last Name Element
			Element nationalitiesElement = doc.createElement("Nationalities");
			Element personRootElement1 = doc.createElement("Nationality");
			personRootElement1.appendChild(doc.createTextNode(""));
			nationalitiesElement.appendChild(personRootElement1);
			personRootElement.appendChild(nationalitiesElement);

			Element correspondenceAddressLine1Element = doc.createElement("CorrespondenceAddressLine1");
			correspondenceAddressLine1Element.appendChild(doc.createTextNode(""));
			personRootElement.appendChild(correspondenceAddressLine1Element);

			Element correspondenceAddressLine2Element = doc.createElement("CorrespondenceAddressLine2");
			correspondenceAddressLine2Element.appendChild(doc.createTextNode(""));
			personRootElement.appendChild(correspondenceAddressLine2Element);

			Element correspondenceAddressLine3Element = doc.createElement("CorrespondenceAddressLine3");
			correspondenceAddressLine3Element.appendChild(doc.createTextNode(""));
			personRootElement.appendChild(correspondenceAddressLine3Element);

			Element correspondenceAddressCityElement = doc.createElement("CorrespondenceAddressCity");
			correspondenceAddressCityElement.appendChild(doc.createTextNode(""));
			personRootElement.appendChild(correspondenceAddressCityElement);

			Element correspondenceAddressStateElement = doc.createElement("CorrespondenceAddressState");
			correspondenceAddressStateElement.appendChild(doc.createTextNode(""));
			personRootElement.appendChild(correspondenceAddressStateElement);

			Element correspondenceAddressCountryElement = doc.createElement("CorrespondenceAddressCountry");
			correspondenceAddressCountryElement.appendChild(doc.createTextNode(""));
			personRootElement.appendChild(correspondenceAddressCountryElement);

			Element correspondenceAddressPinCodeElement = doc.createElement("CorrespondenceAddressPinCode");
			correspondenceAddressPinCodeElement.appendChild(doc.createTextNode(""));
			personRootElement.appendChild(correspondenceAddressPinCodeElement);

			Element permanentAddressLine1Element = doc.createElement("PermanentAddressLine1");
			permanentAddressLine1Element.appendChild(doc.createTextNode(""));
			personRootElement.appendChild(permanentAddressLine1Element);

			Element permanentAddressLine2Element = doc.createElement("PermanentAddressLine2");
			permanentAddressLine2Element.appendChild(doc.createTextNode(""));
			personRootElement.appendChild(permanentAddressLine2Element);

			Element permanentAddressLine3Element = doc.createElement("PermanentAddressLine3");
			permanentAddressLine3Element.appendChild(doc.createTextNode(""));
			personRootElement.appendChild(permanentAddressLine3Element);

			Element permanentAddressCityElement = doc.createElement("PermanentAddressCity");
			permanentAddressCityElement.appendChild(doc.createTextNode(""));
			personRootElement.appendChild(permanentAddressCityElement);

			Element permanentAddressStateElement = doc.createElement("PermanentAddressState");
			permanentAddressStateElement.appendChild(doc.createTextNode(""));
			personRootElement.appendChild(permanentAddressStateElement);

			Element permanentAddressCountryElement = doc.createElement("PermanentAddressCountry");
			permanentAddressCountryElement.appendChild(doc.createTextNode(""));
			personRootElement.appendChild(permanentAddressCountryElement);

			Element permanentAddressPinCodeElement = doc.createElement("PermanentAddressPinCode");
			permanentAddressPinCodeElement.appendChild(doc.createTextNode(""));
			personRootElement.appendChild(permanentAddressPinCodeElement);

			Element workMobileISDElement = doc.createElement("WorkMobileISD");
			workMobileISDElement.appendChild(doc.createTextNode(""));
			personRootElement.appendChild(workMobileISDElement);

			Element workMobileNumberElement = doc.createElement("WorkMobileNumber");
			workMobileNumberElement.appendChild(doc.createTextNode(""));
			personRootElement.appendChild(workMobileNumberElement);

			Element personalMobileISDElement = doc.createElement("PersonalMobileISD");
			personalMobileISDElement.appendChild(doc.createTextNode(""));
			personRootElement.appendChild(personalMobileISDElement);

			Element personalMobileNumberElement = doc.createElement("PersonalMobileNumber");
			if (requestMap.containsKey("PersonalMobileNumber")) {
				personalMobileNumberElement.appendChild(doc.createTextNode(requestMap.get("PersonalMobileNumber")));
			} else {
				personalMobileNumberElement.appendChild(doc.createTextNode(requestMap.get("PersonalMobileNumber")));
			}
			personRootElement.appendChild(personalMobileNumberElement);

			Element workEmailElement = doc.createElement("WorkEmail");
			workEmailElement.appendChild(doc.createTextNode(""));
			personRootElement.appendChild(workEmailElement);

			Element personalEmailElement = doc.createElement("PersonalEmail");
			if (requestMap.containsKey("PersonalEmail")) {
				personalEmailElement.appendChild(doc.createTextNode(requestMap.get("PersonalEmail")));
			} else {
				personalEmailElement.appendChild(doc.createTextNode(requestMap.get("PersonalEmail")));
			}
			personRootElement.appendChild(personalEmailElement);

			Element tagsElement = doc.createElement("Tags");
			Element tagElement = doc.createElement("Tag");
			tagElement.appendChild(doc.createTextNode(""));
			tagsElement.appendChild(tagElement);
			personRootElement.appendChild(tagsElement);

			Element productSegmentsElement = doc.createElement("ProductSegments");
			Element productSegmentElement = doc.createElement("ProductSegment");
			productSegmentElement.appendChild(doc.createTextNode(""));
			productSegmentsElement.appendChild(productSegmentElement);
			personRootElement.appendChild(productSegmentsElement);

			Element screeningCategoryElement = doc.createElement("ScreeningCategory");
			screeningCategoryElement.appendChild(
					doc.createTextNode(PropertiesManager.propertiesMap.get(Constants.SCREENING_CATEGORY.getValue())));
			personRootElement.appendChild(screeningCategoryElement);

			// Transform Document to XML String
			TransformerFactory tf = TransformerFactory.newInstance();
			javax.xml.transform.Transformer transformer = tf.newTransformer();
			StringWriter writer = new StringWriter();
			transformer.transform(new DOMSource(doc), new StreamResult(writer));
			// Get the String value of final xml document
			personXMLStringValue = writer.getBuffer().toString();

		} catch (ParserConfigurationException | TransformerException e) {
			logger.error("Exception " , e);
		}
		logger.info("AML Request:" + personXMLStringValue);
		return personXMLStringValue;
	}

	public String encrypt(String input, SecretKey symmetrickey) {
		byte[] crypted = null;
		try {
			Cipher cipher = Cipher.getInstance("AES/ECB/PKCS5Padding");
			cipher.init(Cipher.ENCRYPT_MODE, symmetrickey);
			crypted = cipher.doFinal(input.getBytes());
		} catch (Exception e) {
			logger.error("Exception " , e);
			return null;
		}
		logger.info("Encrypted AML request:" + new String(Base64.getEncoder().encode(crypted)));
		return new String(Base64.getEncoder().encode(crypted));
	}

	public String encryptRsa(String request) {
		try {
			String fileName = PropertiesManager.propertiesMap.get(Constants.AML_PUBLIC_CERT_LOCATION.getValue());
			File file = new File(fileName);
			PublicKey publicKey = getPublicKey(file);
			Cipher cipher = Cipher.getInstance(RSA_CIPHER_ALGORITHM);
			cipher.init(Cipher.ENCRYPT_MODE, publicKey);
			byte[] cipherText = cipher.doFinal(request.getBytes());
			return Base64.getEncoder().encodeToString(cipherText);
		} catch (Exception e) {
			logger.error("Exception " , e);
			return null;
		}
	}

	private PublicKey getPublicKey(File filename) {
		try {
			FileInputStream inputStream = new FileInputStream(filename);
			CertificateFactory cert = CertificateFactory.getInstance("X.509");
			X509Certificate cer = (X509Certificate) cert.generateCertificate(inputStream);
			inputStream.close();
			return cer.getPublicKey();

		} catch (Exception e) {
			logger.error("Exception " , e);
			return null;
		}
	}

	public String requestModel(String token, String encodedRequestData, String sessionKey) {
		String A64EncryptedRequestModel = null;
		DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
		try {
			DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
			Document doc = docBuilder.newDocument();
			// Create Person root element
			Element personRootElement = doc.createElement("A64EncryptedRequestModel");
			personRootElement.setAttribute("xmlns:xsd", "http://www.w3.org/2001/XMLSchema");
			personRootElement.setAttribute("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
			doc.appendChild(personRootElement);
			// Create First Name Element
			Element requestIdElement = doc.createElement("ApiToken");
			requestIdElement.appendChild(doc.createTextNode(token));
			personRootElement.appendChild(requestIdElement);

			Element recordIdentifierElement = doc.createElement("SessionKey");
			recordIdentifierElement.appendChild(doc.createTextNode(sessionKey));
			personRootElement.appendChild(recordIdentifierElement);

			Element applicationRefNumberElement = doc.createElement("RequestData");
			applicationRefNumberElement.appendChild(doc.createTextNode(encodedRequestData));
			personRootElement.appendChild(applicationRefNumberElement);

			// Transform Document to XML String
			TransformerFactory tf = TransformerFactory.newInstance();
			javax.xml.transform.Transformer transformer = tf.newTransformer();
			StringWriter writer = new StringWriter();
			transformer.transform(new DOMSource(doc), new StreamResult(writer));

			OutputStream os = new FileOutputStream(
					PropertiesManager.propertiesMap.get(Constants.AML_FILE_LOCATION.getValue()) + "MyRequest.xml");
			TransformerFactory tf1 = TransformerFactory.newInstance();
			Transformer trans = tf1.newTransformer();
			trans.transform(new DOMSource(doc), new StreamResult(os));
			// Get the String value of final xml document
			A64EncryptedRequestModel = writer.getBuffer().toString();

		} catch (Exception e) {
			logger.error("Exception " , e);
		}
		return A64EncryptedRequestModel;
	}

	public <X509SubjectName, X509Principal> String getsignature() {
		String A64EncryptedRequestModel = null;
		try {

			XMLSignatureFactory fac = XMLSignatureFactory.getInstance("DOM");

			Transform exc14nTranform = fac.newTransform("http://www.w3.org/TR/2001/REC-xml-c14n-20010315",
					(TransformParameterSpec) null);
			Transform envTransform = fac.newTransform(Transform.ENVELOPED, (TransformParameterSpec) null);

			List<Transform> transformList = new ArrayList();
			transformList.add(envTransform);
			// transformList.add(exc14nTranform);

			Reference ref = fac.newReference("", fac.newDigestMethod(DigestMethod.SHA1, null), transformList, null,
					null);

			SignedInfo si = fac.newSignedInfo(
					fac.newCanonicalizationMethod(CanonicalizationMethod.INCLUSIVE, (C14NMethodParameterSpec) null),
					fac.newSignatureMethod(SignatureMethod.RSA_SHA1, null), Collections.singletonList(ref));

			KeyStore ks = KeyStore.getInstance("JKS");
			ks.load(new FileInputStream(PropertiesManager.propertiesMap.get(Constants.AML_JKS_LOCATION.getValue())),
					PropertiesManager.propertiesMap.get(Constants.AML_JKS_PASSWORD.getValue()).toCharArray());
			KeyStore.PrivateKeyEntry keyEntry = (KeyStore.PrivateKeyEntry) ks.getEntry("1",
					new KeyStore.PasswordProtection(PropertiesManager.propertiesMap.get(Constants.AML_PRIVATE_KEY_PASSWARD.getValue()).toCharArray()));
			X509Certificate cert = (X509Certificate) keyEntry.getCertificate();

			KeyInfoFactory kif = fac.getKeyInfoFactory();
			List x509Content = new ArrayList();

			x509Content.add(cert.getSubjectDN().getName());
			x509Content.add(cert);

			X509Data xd = kif.newX509Data(x509Content);
			KeyInfo ki = kif.newKeyInfo(Collections.singletonList(xd));

			DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
			dbf.setNamespaceAware(true);
			/*
			 * Document doc = dbf.newDocumentBuilder() .parse(new
			 * FileInputStream("C:\\Users\\Amitosh Aanand\\Downloads\\Files\\MyRequest.xml")
			 * );
			 */
			Document doc = dbf.newDocumentBuilder().parse(
					new FileInputStream(PropertiesManager.propertiesMap.get(Constants.AML_FILE_LOCATION.getValue()) + "MyRequest.xml"));

			DOMSignContext dsc = new DOMSignContext(keyEntry.getPrivateKey(), doc.getDocumentElement());
			XMLSignature signature = fac.newXMLSignature(si, ki);
			signature.sign(dsc);

			OutputStream os = new FileOutputStream(
					PropertiesManager.propertiesMap.get(Constants.AML_FILE_LOCATION.getValue()) + "MyResponse.xml");
			TransformerFactory tf = TransformerFactory.newInstance();
			Transformer trans = tf.newTransformer();
			trans.transform(new DOMSource(doc), new StreamResult(os));

			TransformerFactory tf1 = TransformerFactory.newInstance();
			javax.xml.transform.Transformer transformer = tf1.newTransformer();
			StringWriter writer = new StringWriter();
			transformer.transform(new DOMSource(doc), new StreamResult(writer));
			// Get the String value of final xml document
			A64EncryptedRequestModel = writer.getBuffer().toString();
			logger.info("AML final request: " + A64EncryptedRequestModel);
		}

		catch (Exception e) {
			logger.error("Exception " , e);
		}

		return A64EncryptedRequestModel;
	}

}
